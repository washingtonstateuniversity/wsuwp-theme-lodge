//
// Color Mixin
//
@function color($palette, $tone: "base") {
	@return map-get(map-get($colors, $palette), $tone);
}

//
// Media Queries
//
// Example: @include mq("small") { color: red; }
//
$breakpoints: (
	"small":  768px,
	"medium": 1024px,
	"large":  1440px,
);

@mixin mq($width, $type: min) {
	@if map_has_key($breakpoints, $width) {
		$width: map_get($breakpoints, $width);

		@if $type == max {
			$width: $width - 1px;
		}

		@media only screen and (#{$type}-width: $width) {
			@content;
		}
	}
}

//
// Z-index
//
// Example: z-index: z("site-header");
//
$z-indexes: (
	"outdated-browser",
	"modal",
	"site-header",
	"page-wrapper",
	"site-footer"
);

@function z($name) {
	@if index($z-indexes, $name) {
		@return (length($z-indexes) - index($z-indexes, $name)) + 1;
	}

	@else {
		@warn "There is no item "#{$name}" in this list; choose one of: #{$z-indexes}";
		@return null;
	}
}

//
// Clear Margin
//
// Example: @include clear-margin(left);
@mixin clear-margin($position: bottom) {
	margin-#{$position}: 0;
}

//
// Clear Padding
//
// Example: @include clear-padding(left);
@mixin clear-padding($position: bottom) {
	padding-#{$position}: 0;
}

//
// Layout Tools
//
// Example: @include row("fixed", 4);
@mixin row($type: fixed, $padding-modifier: 1) {
	display: flex;

	margin: 0 auto;
	padding: 0 $global-base-unit * $padding-modifier;

	@if ($type == "fixed") {
		max-width: $global-grid-size;
	}

	@else {
		max-width: 100%;
	}
}

@mixin column($count: 1) {
	width: percentage($count / 12);
}

@mixin sidebar() {
	width: 30%;
}

@mixin gutter() {
	padding-right: $global-base-unit;
	padding-left: $global-base-unit;
}

//
// Add required psuedo element properties
//
@mixin psuedo($position: relative) {
	position: $position;

	display: block;

	content: "";
}
