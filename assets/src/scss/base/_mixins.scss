//
// Color Mixin
//
@function color($palette, $tone: 'base') {
	@return map-get(map-get($colors, $palette), $tone);
}

//
// Media Queries
//
// Example: @include mq('tablet-small') { color: red; }
//

$breakpoints: (
	"phone":        400px,
	"phone-wide":   480px,
	"phablet":      560px,
	"tablet-small": 640px,
	"tablet":       768px,
	"tablet-wide":  1024px,
	"desktop":      1248px,
	"desktop-wide": 1440px
);

@mixin mq($width, $type: min) {
	@if map_has_key($breakpoints, $width) {
		$width: map_get($breakpoints, $width);
		@if $type == max {
			$width: $width - 1px;
		}
		@media only screen and (#{$type}-width: $width) {
			@content;
		}
	}
}

//
// Z-index
//
// Example: z-index: z('site-header');
//

$z-indexes: (
	"outdated-browser",
	"modal",
	"site-header",
	"page-wrapper",
	"site-footer"
);

@function z($name) {
	@if index($z-indexes, $name) {
		@return (length($z-indexes) - index($z-indexes, $name)) + 1;
	} @else {
		@warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
		@return null;
	}
}

//
// Strip Units
//
// Example: $font-size: strip-unit($font-size);
//
@function strip-unit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
	  @return $number / ($number * 0 + 1);
	}

	@return $number;
  }

// Cast to Number
@function number($string) {
	// Matrices
	$strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
	$numbers: 0 1 2 3 4 5 6 7 8 9;

	// Result
	$result: 0;

	// Looping through all characters
	@for $i from 1 through str-length($string) {
	  // Do magic
	}

	@return $result;
  }

//
// Font Sizing
//
// Example: @include vertical-rythm(ms(1));
@mixin type-size($font-size) {
	font-size: ms($font-size);

	$font-size: ms($font-size);
	color: $font-size;
	line-height: number(#{ms($font-size)}) * 1;
	line-height: 1 * 1.33;

}
